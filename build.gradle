/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.5.1/userguide/java_library_plugin.html
 */

repositories {
    mavenCentral()
}

group 'com.diem'
version '1.0.5'

apply plugin: 'java-library'
apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'com.google.protobuf'
apply plugin: 'idea'
apply plugin: 'io.codearte.nexus-staging'

task sourceJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allSource
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'Diem Client SDK'
                description = 'The official Diem Client SDK for the Java programming language.'
                url = 'https://github.com/diem/client-sdk-java'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        name = 'Diem Open Source'
                        url = 'https://developers.diem.com'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:diem/client-sdk-java.git'
                    url = 'https://github.com/diem/client-sdk-java'
                }
            }
            tasks.withType(Jar) {
                from(project.projectDir) {
                    include 'LICENSE'
                    into 'META-INF'
                }
            }
        }
    }
    repositories {
        maven {
            url 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
            credentials {
                username System.getenv('ossrhUsername')
                password System.getenv('ossrhPassword')
            }
        }
    }
}

dependencies {
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.66'
    implementation 'org.bitcoinj:bitcoinj-core:0.15.8'
    implementation 'design.contract:libbech32:1.0.0'
    implementation 'org.apache.httpcomponents:httpclient:4.5.10'
    implementation 'org.apache.commons:commons-lang3:3.11'
    implementation 'com.google.protobuf:protobuf-java:3.13.0'
    implementation 'com.google.protobuf:protobuf-java-util:3.13.0'
    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:29.0-jre'
    // Use JUnit test framework
    testImplementation 'junit:junit:4.13'
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    options.addBooleanOption('Xdoclint:none', true)
}

signing {
    def signingKey = System.getenv("signingKey")
    def signingPassword = System.getenv("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

task gen {
    doLast {
        exec {
            workingDir 'diem'
            executable "sh"
            args "-c", "cargo build -p transaction-builder-generator"
        }
        exec {
            workingDir 'diem'
            executable "sh"
            args '-c', 'target/debug/generate-transaction-builders' +
                    ' --language java' +
                    ' --module-name com.diem.stdlib' +
                    ' --with-diem-types "testsuite/generate-format/tests/staged/diem.yaml"' +
                    ' --with-custom-diem-code language/transaction-builder/generator/examples/java/custom_diem_code/*.java' +
                    ' --target-source-dir "./../src/main/java"' +
                    ' "language/diem-framework/releases/legacy" "language/diem-framework/releases/artifacts/current"'
        }
    }
}


buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.13'
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.22.0"
    }
}
protobuf {
    protoc {
        // Download from repositories
        artifact = 'com.google.protobuf:protoc:3.0.0'
    }
    generatedFilesBaseDir = "$projectDir/src"
}

jacocoTestReport {
    reports {
        html.enabled(true)
    }
}

nexusStaging {
    username = System.getenv("nexusUsername")
    password = System.getenv("nexusPassword")
}
